'use server';

/**
 * @fileOverview An AI agent for enhancing image quality.
 *
 * - enhanceImageQuality - A function that enhances the quality of an image up to 16K and provides a before-and-after comparison.
 * - EnhanceImageQualityInput - The input type for the enhanceImageQuality function.
 * - EnhanceImageQualityOutput - The return type for the enhanceImageQuality function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const EnhanceImageQualityInputSchema = z.object({
  photoDataUri: z
    .string()
    .describe(
      "A photo to be enhanced, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type EnhanceImageQualityInput = z.infer<typeof EnhanceImageQualityInputSchema>;

const EnhanceImageQualityOutputSchema = z.object({
  enhancedImageGemini: z
    .string()
    .describe('The enhanced image generated by Gemini, as a data URI.'),
  enhancedImageOpenAI: z
    .string()
    .describe('The enhanced image generated by OpenAI, as a data URI.'),
});
export type EnhanceImageQualityOutput = z.infer<typeof EnhanceImageQualityOutputSchema>;

export async function enhanceImageQuality(input: EnhanceImageQualityInput): Promise<EnhanceImageQualityOutput> {
  return enhanceImageQualityFlow(input);
}

const enhanceImageQualityFlow = ai.defineFlow(
  {
    name: 'enhanceImageQualityFlow',
    inputSchema: EnhanceImageQualityInputSchema,
    outputSchema: EnhanceImageQualityOutputSchema,
  },
  async input => {
    const enhancePrompt = 'Enhance the quality of the following image to the highest possible resolution, up to 16K.'

    // Generate the enhanced image using Gemini.
    const geminiResult = ai.generate({
      prompt: [      
        {media: {url: input.photoDataUri}},
        {text: enhancePrompt}],
        model: 'googleai/gemini-2.0-flash-preview-image-generation',
        config: {
          responseModalities: ['TEXT', 'IMAGE'], // MUST provide both TEXT and IMAGE, IMAGE only won't work
        },
    });

    // Generate the enhanced image using OpenAI.
    const openAIResult = ai.generate({
      prompt: [      
        {media: {url: input.photoDataUri}},
        {text: enhancePrompt}],
        model: 'googleai/gemini-2.0-flash-preview-image-generation',
        config: {
          responseModalities: ['TEXT', 'IMAGE'], // MUST provide both TEXT and IMAGE, IMAGE only won't work
        },
    });
    
    const [geminiImage, openAIImage] = await Promise.all([geminiResult, openAIResult]);

    return {
      enhancedImageGemini: geminiImage.media?.url ?? 'no image generated',
      enhancedImageOpenAI: openAIImage.media?.url ?? 'no image generated',
    };
  }
);
