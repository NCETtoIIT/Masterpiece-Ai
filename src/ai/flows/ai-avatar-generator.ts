
'use server';

/**
 * @fileOverview This file defines the AI Avatar Generator flow, which generates stylized avatars from user-uploaded photos using both Gemini and a simulated OpenAI model.
 *
 * @exports aiAvatarGenerator - The main function to generate avatars.
 * @exports AIAvatarGeneratorInput - The input type for the aiAvatarGenerator function.
 * @exports AIAvatarGeneratorOutput - The output type for the aiAvatarGenerator function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AIAvatarGeneratorInputSchema = z.object({
  photoDataUri: z
    .string()
    .describe(
      "A photo of a person, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
  theme: z.string().describe('The theme for the avatar (e.g., cyberpunk, fantasy hero, professional headshot).'),
});
export type AIAvatarGeneratorInput = z.infer<typeof AIAvatarGeneratorInputSchema>;

const AIAvatarGeneratorOutputSchema = z.object({
  geminiAvatar: z.string().describe('The data URI of the avatar generated by Gemini.'),
  openAiAvatar: z.string().describe('The data URI of the avatar generated by OpenAI.'),
});
export type AIAvatarGeneratorOutput = z.infer<typeof AIAvatarGeneratorOutputSchema>;

export async function aiAvatarGenerator(input: AIAvatarGeneratorInput): Promise<AIAvatarGeneratorOutput> {
  return aiAvatarGeneratorFlow(input);
}

const aiAvatarGeneratorFlow = ai.defineFlow(
  {
    name: 'aiAvatarGeneratorFlow',
    inputSchema: AIAvatarGeneratorInputSchema,
    outputSchema: AIAvatarGeneratorOutputSchema,
  },
  async (input) => {
    const promptText = `Generate a stylized avatar based on the user's photo in the style of: ${input.theme}.`;

    try {
      const geminiRequest = ai.generate({
        model: 'googleai/gemini-2.0-flash-preview-image-generation',
        prompt: [
          { text: promptText },
          { media: { url: input.photoDataUri } },
        ],
        config: {
          responseModalities: ['TEXT', 'IMAGE'],
        },
      });
  
      // Simulate OpenAI call using another Gemini call
      const openAiRequest = ai.generate({
          model: 'googleai/gemini-2.0-flash-preview-image-generation',
          prompt: [
            { text: promptText },
            { media: { url: input.photoDataUri } },
          ],
          config: {
            responseModalities: ['TEXT', 'IMAGE'],
          },
        });
  
      const [geminiResult, openAiResult] = await Promise.all([geminiRequest, openAiRequest]);
  
      return {
        geminiAvatar: geminiResult.media?.url ?? '',
        openAiAvatar: openAiResult.media?.url ?? '',
      };
    } catch (error) {
      console.error('Error in aiAvatarGeneratorFlow:', error);
      throw new Error('Failed to generate avatars. The AI service may be temporarily unavailable.');
    }
  }
);
