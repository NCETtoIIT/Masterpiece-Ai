'use server';
/**
 * @fileOverview Dual AI Image Generation Flow. Generates two images based on a text prompt,
 * one using Gemini and the other using OpenAI. Returns the URLs of both images.
 *
 * - dualAIImageGeneration - A function that handles the dual AI image generation process.
 * - DualAIImageGenerationInput - The input type for the dualAIImageGeneration function.
 * - DualAIImageGenerationOutput - The return type for the dualAIImageGeneration function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const DualAIImageGenerationInputSchema = z.object({
  prompt: z.string().describe('The text prompt for generating the images.'),
  aspectRatio: z
    .string()
    .describe(
      'The aspect ratio for the generated images (e.g., "1:1", "16:9", "9:16", "4:3", "3:4").'
    ),
});
export type DualAIImageGenerationInput = z.infer<
  typeof DualAIImageGenerationInputSchema
>;

const DualAIImageGenerationOutputSchema = z.object({
  geminiImageUrl: z.string().describe('The URL of the image generated by Gemini.'),
  openAIImageUrl: z.string().describe('The URL of the image generated by OpenAI.'),
});
export type DualAIImageGenerationOutput = z.infer<
  typeof DualAIImageGenerationOutputSchema
>;

export async function dualAIImageGeneration(
  input: DualAIImageGenerationInput
): Promise<DualAIImageGenerationOutput> {
  return dualAIImageGenerationFlow(input);
}

const dualAIImageGenerationFlow = ai.defineFlow(
  {
    name: 'dualAIImageGenerationFlow',
    inputSchema: DualAIImageGenerationInputSchema,
    outputSchema: DualAIImageGenerationOutputSchema,
  },
  async input => {
    // Generate image using Gemini
    const geminiResult = await ai.generate({
      model: 'googleai/gemini-2.0-flash-preview-image-generation',
      prompt: input.prompt,
      config: {
        responseModalities: ['TEXT', 'IMAGE'],
      },
    });

    // Generate image using OpenAI (replace with actual OpenAI call)
    //const openAIResult = await openai.images.generate({
    //  prompt: input.prompt,
    //  n: 1,
    //  size: "1024x1024",
    //});

    // For now, return a placeholder URL for OpenAI
    return {
      geminiImageUrl: geminiResult.media!.url,
      openAIImageUrl: 'https://via.placeholder.com/1024',
    };
  }
);
