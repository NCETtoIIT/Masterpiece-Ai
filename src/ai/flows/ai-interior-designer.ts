'use server';

/**
 * @fileOverview An AI Interior Designer flow that generates redesign options for a room based on user prompts.
 *
 * - aiInteriorDesign - A function that handles the interior design generation process.
 * - AiInteriorDesignInput - The input type for the aiInteriorDesign function.
 * - AiInteriorDesignOutput - The return type for the aiInteriorDesign function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AiInteriorDesignInputSchema = z.object({
  photoDataUri: z
    .string()
    .describe(
      "A photo of a room, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
  prompt: z.string().describe('The desired style and aesthetics for the redesign.'),
});
export type AiInteriorDesignInput = z.infer<typeof AiInteriorDesignInputSchema>;

const AiInteriorDesignOutputSchema = z.object({
  geminiImage: z.string().describe('The redesigned image generated by Gemini.'),
  openAiImage: z.string().describe('The redesigned image generated by OpenAI.'),
});
export type AiInteriorDesignOutput = z.infer<typeof AiInteriorDesignOutputSchema>;

export async function aiInteriorDesign(input: AiInteriorDesignInput): Promise<AiInteriorDesignOutput> {
  return aiInteriorDesignFlow(input);
}

const aiInteriorDesignFlow = ai.defineFlow(
  {
    name: 'aiInteriorDesignFlow',
    inputSchema: AiInteriorDesignInputSchema,
    outputSchema: AiInteriorDesignOutputSchema,
  },
  async input => {
    const promptText = `You are an expert interior designer. Create a redesigned version of the room in the provided image, matching the style and aesthetics described in the prompt. Prompt: ${input.prompt}`;
    
    // Generate images using both Gemini and OpenAI
    const [geminiResult, openAiResult] = await Promise.all([
      ai.generate({
        prompt: [{text: promptText}, {media: {url: input.photoDataUri}}],
        model: 'googleai/gemini-2.0-flash-preview-image-generation',
        config: {
          responseModalities: ['TEXT', 'IMAGE'],
        },
      }),
      ai.generate({
        prompt: [{text: promptText}, {media: {url: input.photoDataUri}}],
        model: 'googleai/gemini-2.0-flash-preview-image-generation',
        config: {
          responseModalities: ['TEXT', 'IMAGE'],
        },
      }),
    ]);

    return {
      geminiImage: geminiResult.media?.url ?? '',
      openAiImage: openAiResult.media?.url ?? '',
    };
  }
);
